# dkms.conf: Dynamic Kernel Module Support (DKMS) configuration file for Hd44780.
#
# The use of DKMS ensures that the Hd44780 kernel modules will be rebuilt
# whenever the kernel is upgraded.
#
# Installation instructions:
#   root@host:~# dkms install /path/to/Hd44780
#
# You should normally not need to edit any of the lines in this file. The
# meanings of the various directives below are documented in DKMS(8).

PACKAGE_NAME="hd44780-i2c"


# DKMS is quite finicky about the contents of the $PACKAGE_VERSION string. It
# will source dkms.conf every time it performs a task, but if the contents
# $PACKAGE_VERSION changes between runs, it fails to work correctly. Since we
# might dynamically generate the version string (based on output from
# "git describe" or "date"), we make sure to generate it only once and save
# the result in a cache file so it can be re-used later.

# Determine where the actual source tree we're working on is located.
# $BASH_SOURCE holds the full path to dkms.conf, which resides in the
# apex of Hd44780's source tree. So we just have to strip off "/dkms.conf".
SRCDIR="${BASH_SOURCE%/dkms.conf}"

# This cache file will hold the generated $PACKAGE_VERSION string.
#VERSIONFILE="${SRCDIR}/dkms.package_version.conf"

# If necessary (i.e., if we do not have a cache file at this point), then
# determine the DKMS version string and store it in the cache file.
#if test ! -e "${VERSIONFILE}"; then
#  # First, determine the main Hd44780 version based on macros in xlat.h
#  eval "$(sed -n '/^#define  *HD44780_VERSION_\(MAJOR\|MINOR\|REV\) / {
#                    s/^#define  *//;
#                    s/  */=/p;
#                  }' ${SRCDIR}/src/common/xlat.h)"
#
#  if test ! -z "$HD44780_VERSION_MAJOR" -a ! -z "$HD44780_VERSION_MINOR" -a \
#          ! -z "$HD44780_VERSION_REV"; then
#    # OK, we successfully determined the main Hd44780 version.
#    HD44780VER="${HD44780_VERSION_MAJOR}.${HD44780_VERSION_MINOR}.${HD44780_VERSION_REV}"
#  else
#    # We failed to determine the main Hd44780 version. Maybe xlat.h changed
#    # syntax or the HD44780_VERSION_* macros were moved elsewhere? In any case
#    # just use a dummy version string (which must start with a digit,
#    # otherwise "dkms mkdeb" won't work).
#    HD44780VER="0unknown"
#  fi

  # If we're working on a Git checkout, we'll also want to include output
  # from "git describe" in the DKMS version string.
  if test -d "${SRCDIR}/.git"; then
    # We need to replace '-' with '.' in order to make "dkms mkrpm" and
    # "dkms mkdeb" to work correctly.
    GITVER="$(git -C "${SRCDIR}" describe --always | tr - . 2>/dev/null)"
    # In the unlikely event that "git describe" fails (maybe the admin
    # has uninstalled git?), we'll use a date-based string instead.
    test -z "${GITVER}" && GITVER="$(date +%Y%m%d)"
    # Prepend ".git." to Git version string so its origin is clear.
    GITVER=".git.${GITVER}"
  fi

  # All done - now store the generated version string for later use.
  echo "# Automatically generated from dkms.conf on $(date -R)" > \
         "${VERSIONFILE}"
  echo "PACKAGE_VERSION=${HD44780VER}${GITVER}" >> "${VERSIONFILE}"
fi

# At this point we should be able to read in the previously generated
# $PACKAGE_VERSION string from the cache file. If this fails, DKMS will
# simply fail and complain that the dkms.conf did not set $PACKAGE_VERSION.
. "${VERSIONFILE}"

# This instructs DKMS to rebuild the Hd44780 kernel modules when necessary,
# such as after a kernel upgrade.
AUTOINSTALL="yes"

MAKE[0]="make -C ${kernel_source_dir} M=${dkms_tree}/${PACKAGE_NAME}/${PACKAGE_VERSION}/build/src/hd44780-i2c "

CLEAN="make -C ${dkms_tree}/${PACKAGE_NAME}/${PACKAGE_VERSION}/build/src/hd44780-i2c clean"

BUILT_MODULE_NAME[0]="hd44780-i2c"
BUILT_MODULE_LOCATION[0]="src/hd44780-i2c"
DEST_MODULE_LOCATION[0]="/kernel/drivers/auxdisplay"

	